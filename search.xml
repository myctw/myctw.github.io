<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Nuget API查詢Package版本]]></title>
    <url>%2Fpost%2F906d.html</url>
    <content type="text"><![CDATA[最近需要做一個小工具去整理出指定資料夾所有使用的第三方套件版本，同時去查詢nuget最新版本號。拆解步驟大概就是兩個 掃出使用套件清單 以這個清單查尋nuget最新版本 透過以下語法找出所有 .csproj 檔名的檔案，並找到第三方套件的內容。我們找一個 csproj 範例如下： 12345&lt;Project Sdk="Microsoft.NET.Sdk"&gt; &lt;ItemGroup&gt; &lt;PackageReference Include="Newtonsoft.Json" Version="12.0.2" /&gt; &lt;/ItemGroup&gt;&lt;/Project&gt; 透過以下語法找到檔案並解析內容： 1234567891011121314//找出所有 .csproj 檔案var allFiles = Directory.GetFiles(arg, "*.csproj", SearchOption.AllDirectories);//依序以 XDocument 載入並解析出第三方套件的名稱與版本號foreach (var file in allFiles)&#123; var projDefinition = XDocument.Load(file); var elements = projDefinition.Element("Project")?.Element("ItemGroup")?.Elements("PackageReference"); if (elements == null) continue; if (!elements.Any()) continue; var pkgRefs = elements.ToDictionary(x =&gt; x.Attribute("Include")?.Value, x =&gt; x.Attribute("Version")?.Value);&#125; 剩下的功能就是查詢 Nuget 取得版本號碼。由於大部分人的使用都是直接使用 IDE 或 VS 的 package management console 來安裝，幾乎沒有使用 api 去呼叫的需求，這類型的資訊在網路上很少;若是哪天要整理的內容變很多時，手動就感覺特別的沒有效率。 我絕對不會承認官方文件看好久還是看不懂 透過 Package 名稱去查詢版本號碼其實並不太難，在 v3 api 中格式如下： 1https://api.nuget.org/v3-flatcontainer/&#123;PackageName&#125;/index.json 只要把{PackageName}替換成套件名稱即可。而 Nuget 會回傳一個 json 格式資料，我們以查詢 Newtonsoft.Json 套件為例。Url example: 1https://api.nuget.org/v3-flatcontainer/Newtonsoft.Json/index.json 為了精簡版面，省去中間版本號內容，結果如下： 123456789&#123; "versions": [ "3.5.8", "4.0.1", "12.0.2-beta2", "12.0.2-beta3", "12.0.2" ]&#125; 寫到這邊其實就結束了，可以透過迴圈與 HttpClient 去呼叫 Nuget 取得這樣結果; 他也幫你排好順序，其實直接取用 .Last() 即可。 123456789101112131415161718192021222324public static async Task&lt;string&gt; GetResultAsync(string url)&#123; var result = ""; try &#123; var httpClient = new HttpClient(); var response = await httpClient.GetAsync(url); if (response != null) &#123; if (response.IsSuccessStatusCode) &#123; result = await response.Content.ReadAsStringAsync(); &#125; else &#123; &#125; &#125; &#125; catch (Exception ex) &#123; &#125; return result;&#125; Reference Nuget API Document Nuget API Service]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>.net core</tag>
        <tag>nuget</tag>
        <tag>api</tag>
        <tag>package</tag>
        <tag>version</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[效能評估工具 BenchmarkDotNet]]></title>
    <url>%2Fpost%2Fc50b.html</url>
    <content type="text"><![CDATA[「欸這功能效能很差，每次用都速度很慢。」這是一個很常見的「感覺」形容。每個人對於速度的快慢定義不同，有些人覺得這速度很ＯＫ，而有些人覺得效能真的太差。 在工作上我們需要盡量避免這樣的形容詞，除了不夠精確之外，還需要花費更多、額外的時間來校正雙方的度量尺，這時候就需要一個公正、客觀的數據來協助探討是否這個功能真的很慢。 今天介紹的工具就是免費、開源的 BenchmarkDotNet這個工具能夠協助你快速完成速度的測試，不需要再像以前一樣寫滿StopWatch、手動整理跑完的數據，最後再把計時用的程式碼還原。透過這個工具，只需要短短幾個步驟就可以取得對照的結果。 首先需要下載、安裝這個套件。 1Install-Package BenchmarkDotNet 在本文為了我們建立一個Console專案，然後將要進行的測試內容寫在另一個新開的類別裡面。最基本的使用方式就是將測試目標函式給予 [Benchmark]Attribute即可如下。 1234567891011public class BenchmarkSampleTestClass&#123; [Benchmark] public void TestMethod1() &#123; &#125; [Benchmark] public void TestMethod2() &#123; &#125;&#125; 在 main 方法就可以直接呼叫該class進行benchmark評測。務必在進行benchmark時使用 Release 建置。 12345678class Program&#123; static void Main(string[] args) &#123; var summary = BenchmarkRunner.Run&lt;BenchmarkSampleTestClass&gt;(); Console.ReadLine(); &#125;&#125; 接著在terminal就可以看到花費時間的比較表。 實際範例LINQ在開發上經常會使用到，跟任何工具一樣，使用不當的時候反而會降低其效果，這邊就選一個新手常犯的錯誤：關於 Select 與 Where 的使用時機。 在這個測試類別宣告的時候，建構子會建構一個list存放10000個User物件，我們寫出兩個method分別為SelectFirstMethod與WhereFirstMethod，顧名思義就是先使用select與先使用where的差別。目的很簡單就是找到一個條件的所有物件的ID，轉成list回傳。 123456789101112131415161718192021222324252627public class BenchmarkSampleTestClass&#123; private readonly List&lt;User&gt; _data = new List&lt;User&gt;(); public BenchmarkSampleTestClass() &#123; PrepareTestObjects(); &#125; [Benchmark] public List&lt;int&gt; SelectFirstMethod() &#123; return _data.Select(x =&gt; x.Id).Where(x =&gt; x &gt; 90).ToList(); &#125; [Benchmark] public List&lt;int&gt; WhereFirstMethod() &#123; return _data.Where(y =&gt; y.Id &gt; 90).Select(y =&gt; y.Id).ToList(); &#125; private void PrepareTestObjects() &#123; for (var itr = 0 ; itr &lt;10000 ; itr++) &#123; _data.Add(new User(itr)); &#125; &#125;&#125; 設置好Release build就可以直接執行，等待結果。 1234567891011| Method | Mean | Error | StdDev ||------------------ |----------:|---------:|---------:|| SelectFirstMethod | 178.78 us | 3.494 us | 5.837 us || WhereFirstMethod | 66.22 us | 1.423 us | 2.416 us |// ***** BenchmarkRunner: End *****// ** Remained 0 benchmark(s) to run **Run time: 00:01:01 (61.66 sec), executed benchmarks: 2Global total time: 00:01:07 (67.01 sec), executed benchmarks: 2 從上面的表格可以得知平均時間的快慢; 當然這個套件還有提供更多功能與資訊，這些都可以參考官方網站的內容。有了這個工具以後會節省更多時間去爭論誰快誰慢的問題，畢竟有數據佐證最直接、客觀公正。 這些結果除了在terminal可以看到外，在專案也會建立一個folder，以專案名稱加上 .Artifacts 命名，存放結果的 .log 檔以及預設提供的 csv, html 與 md 檔。 不同執行平台這個工具可以幫你測試在不同runtime下(NET Framework, .NET Core, Mono and CoreRT.)的表現如何，只需要在class上加上這些attribute。[ClrJob, MonoJob, CoreJob, CoreRtJob] 12[ClrJob, MonoJob, CoreJob, CoreRtJob]public class BenchmarkSampleTestClass 測試基準很多效能調校都會拿原本的code來進行比較，這時候只需要在benchmark後面加上baseline設定即可。 123456[Benchmark(Baseline = true)]public List&lt;int&gt; SelectFirstMethod()&#123;&#125;[Benchmark]public List&lt;int&gt; WhereFirstMethod()&#123;&#125; 本篇文章完整的範例專案在這邊可以下載到。 Reference BenchmarkDotNet Github Document OverView]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>benchmarkdotnet</tag>
        <tag>benchmark</tag>
        <tag>c#</tag>
        <tag>.net core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 下使用 .Net Core 對 MongoDb 的CRUD]]></title>
    <url>%2Fpost%2F5681.html</url>
    <content type="text"><![CDATA[這篇文章主要是介紹以C#強型別使用Mongodb driver連線的CRUD語法，一些MongoDB的名詞就不會多著墨。 情境我們要建立一個 hellomongodb 的資料庫，裡面有 users 的 collection，存放 user 的相關資訊。以下範例都會使用非同步的方式，若有需要同步執行的，可以自行移除async看看，大致上都是這樣。 先打開shell模式建立DB與collection 1234//切換至 hellomongodb 資料庫use hellomongodb//建立名為 users 的 collectiondb.createCollection("users") 建立連線123456const string MongoAddress = &quot;mongodb://localhost:27017&quot;;const string HelloDatabase = &quot;hellomongodb&quot;;const string UserCollection = &quot;users&quot;;var client = new MongoClient(MongoAddress);var collection = client.GetDatabase(HelloDatabase).GetCollection&lt;UserEntity&gt;(UserCollection); Create剛開始肯定沒有資料的，所以我們會先建立幾筆資料做為測試 123456789101112131415161718//建立一筆資料private static async void CreateUser()&#123; await GetUsersCollection().InsertOneAsync( new UserEntity&#123; Name = &quot;Shaka&quot;, Country = &quot;Unknown&quot;, City = &quot;Zodiac Temple&quot;&#125; );&#125;//一次建立多筆資料private static async void CreateMultiUsers()&#123; await GetUsersCollection().InsertManyAsync(new List&lt;UserEntity&gt; &#123; new UserEntity&#123; Name = &quot;Jack&quot;, Country = &quot;Taiwan&quot;, City = &quot;Taipei&quot;&#125;, new UserEntity&#123; Name = &quot;Sion&quot;, Country = &quot;Unknown&quot;, City = &quot;Underworld&quot;&#125;, new UserEntity&#123; Name = &quot;Saga&quot;, Country = &quot;Unknown&quot;, City = &quot;Zodiac Temple&quot;&#125; &#125; );&#125; Read123456789101112private static async Task&lt;List&lt;UserEntity&gt;&gt; GetAllUsers()&#123; var result = await GetUsersCollection().FindAsync(FilterDefinition&lt;UserEntity&gt;.Empty).Result.ToListAsync(); return result;&#125;//尋找 name 欄位等於參數的private static async Task&lt;List&lt;UserEntity&gt;&gt; GetUser(string name)&#123; var filter = Builders&lt;UserEntity&gt;.Filter.Eq(&quot;name&quot;, name); var result = await GetUsersCollection().FindAsync(filter).Result.ToListAsync(); return result;&#125; Update這個範例是尋找名稱為 name 的使用者，將他的 city 欄位改為 newCity 1234567private static async Task&lt;bool&gt; UpdateCity(string name, string newCity)&#123; var filter = Builders&lt;UserEntity&gt;.Filter.Eq(&quot;name&quot;, name); var update = Builders&lt;UserEntity&gt;.Update.Set(&quot;city&quot;, newCity); var result = await GetUsersCollection().UpdateOneAsync(filter, update); return result.IsAcknowledged;&#125; Delete1234567891011private static async Task&lt;bool&gt; DeleteAll()&#123; var result = await GetUsersCollection().DeleteManyAsync(FilterDefinition&lt;UserEntity&gt;.Empty); return result.IsAcknowledged;&#125;private static async Task&lt;bool&gt; DeleteOne(string name)&#123; var filter = Builders&lt;UserEntity&gt;.Filter.Eq(&quot;name&quot;, name); var result = await GetUsersCollection().DeleteOneAsync(filter); return result.IsAcknowledged;&#125; 最基本的CRUD大致上就是這樣，之後再介紹進階的用法，例如projection或是upsert等。 本篇文章完整的範例專案在這邊可以下載到。本篇文章完整的範例專案在這邊可以下載到。 Reference C# Driver Github API Document各種method用法可以在這裡查到，不過有些內容已經過時了。]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>.net core</tag>
        <tag>mongodb</tag>
        <tag>macos</tag>
        <tag>crud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB 語法注意事項 -1]]></title>
    <url>%2Fpost%2F801.html</url>
    <content type="text"><![CDATA[這邊提幾個基本的查詢容易犯得錯，之後再追加比較進階的部分。 只是要確認存在，讓DB只回覆 _id，不需要整個回覆 常見的 1234db.users.findOne(&#123; 'username' : 'pattri' 'pwd' : 'iampass123'&#125;) 其實只要回覆 _id，這樣可以提高傳輸效率 12345678910111213db.users.findOne(&#123; 'username' : 'pattri' 'pwd' : 'iampass123'&#125;, &#123; '_id':1 &#125; )``` - #### 重複用運算子搜索同一個欄位```javascriptdb.users.find(&#123; &#123; 'age': &#123;'$gte': 30&#125; , &#123; 'age': &#123;'$lte': 40&#125; ,&#125; ) 正確的應該是 123db.users.find(&#123; 'age': &#123;'$gte': 30, '$lte': 40&#125;&#125; ) 使用 $nin 效率會比 $in 來得高 子查詢的順序是有差別的 Sample: 1234567891011121314&#123; "_id" : ObjectId("5cb4a9226820f1f878f93d82"), "key" : "key.1", "localization" : [ &#123; "langCode" : "en-gb", "displayValue" : "display_en-gb.1" &#125;, &#123; "langCode" : "zh-tw", "displayValue" : "display_zh-tw.1" &#125; ]&#125; 若按順序搜尋 langCode 、 displayValue 的話，可以找到結果 123456db.col.find(&#123; 'localization' : &#123; 'langCode' : 'en-gb' , 'displayValue' : 'display_en-gb.1' &#125;&#125;) 若沒有按順序搜尋，先查找 displayValue 再 langCode 則會找不到資料！！ 123456db.col.find(&#123; 'localization' : &#123; 'displayValue' : 'display_en-gb.1', 'langCode' : 'en-gb' &#125;&#125;) 子文件查詢，查出符合的項目 這個不是注意事項，是留個語法，不過要特別注意子文件查詢的效能。 Sample: 12345678910111213141516171819202122232425262728&#123; "_id" : ObjectId("5cb4a9226820f1f878f93d82"), "key" : "key.1", "localization" : [ &#123; "langCode" : "en-gb", "displayValue" : "display_en-gb.1" &#125;, &#123; "langCode" : "zh-tw", "displayValue" : "display_zh-tw.1" &#125; ]&#125;,&#123; "_id" : ObjectId("5cb4a9226820f1f878f93d88"), "key" : "key.2", "localization" : [ &#123; "langCode" : "en-gb", "displayValue" : "display_en-gb.2" &#125;, &#123; "langCode" : "zh-tw", "displayValue" : "display_zh-tw.2" &#125; ]&#125; 如果想找出 langCode = ‘en-gb’ 的所有 displayValue 組合，可以這樣做： 1234db.col.find( &#123;'localization.langCode' : 'en-gb'&#125;, &#123;'localization.$' : 1&#125;) 這樣zh-tw的內容就不會出現了，結果如下： 123456789101112131415161718&#123; "_id" : ObjectId("5cb4a9226820f1f878f93d82"), "localization" : [ &#123; "langCode" : "en-gb", "displayValue" : "display_en-gb.1" &#125; ]&#125;&#123; "_id" : ObjectId("5cb4a9226820f1f878f93d88"), "localization" : [ &#123; "langCode" : "en-gb", "displayValue" : "display_en-gb.2" &#125; ]&#125;]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>script</tag>
        <tag>syntax</tag>
        <tag>notice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker-compose 設定檔注意事項]]></title>
    <url>%2Fpost%2Fad90.html</url>
    <content type="text"><![CDATA[最近在使用 docker-compose 加入 mongodb 時遇到一個地雷。由於近日來的挫折感，不免還是問一下專家，專家馬上說道：「對呀！應該要一樣的！」接著馬上解釋原因。是這樣啦～我真的有看過官方文件以及手上的書，也許我沒看得很仔細所以忽略掉吧！ 當初在debug時很認真搜尋網路，發現沒找到相關問題，有提到的只有一個網頁，我想這問題應該在本機開發或者只做demo都不會遇到，不過進到產品階段肯定會碰到。 通常我們在本機開發都會用的yml設定如下： 12345678version: '3'services: mongo: image: mongo container_name: mongo_container ports: - "27017:27017" 啟動後就能很開心的用GUI或cmd連進mongo進行開發。 問題發生在..開發階段時，我們將mongo綁定了url(當然在hostfile也加了)，如下 12345678version: '3'services: database: image: mongo container_name: Mongo_DkrCmps_Test ports: - "27117:27017" entrypoint: [ "/usr/bin/mongod","--bind_ip", "localhost,mongo-local-test.com"] 當很開心的啟動後，就發現用任何方式都無法連線到mongo囉！即使docker-compose ps 也可以看到他在listen的狀態，那麼問題是出在哪？ answer關鍵就是出在 yml 的 service 名稱，這個命名需要和你設定entrypoint 所bind的內容一樣，所以我們來調整一下.. 12345678version: '3'services: mongo-local-test.com: image: mongo container_name: Mongo_DkrCmps_Test ports: - "27117:27017" entrypoint: [ "/usr/bin/mongod","--bind_ip", "localhost,mongo-local-test.com"] 然後就可以連線了….皆大歡喜～]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>service</tag>
        <tag>naming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 好用的工具推薦 OpenInCode]]></title>
    <url>%2Fpost%2Ff64b.html</url>
    <content type="text"><![CDATA[macOS的使用者應該都使用過vs code，加上各種plugin做起事來更是如虎添翼。 今天要介紹的工具是Open In Code，此程式的功能就是在Finder上增加一個”使用vs code開啟”的功能，讓你在使用Finder瀏覽時，隨時都能夠使用vs code開啟當前目錄，不需要再辛苦得再選定資料夾開啟。 那馬上就使用Brew cask來安裝吧！ 1brew cask install open-in-code 下載完後會告訴你安裝好了以及相關位置。 去應用程式裡面找到 Open In Code.app 點選 Open In Code.app 按住 cmd 並拖移到 Finder 上方工具列，出現綠色＋號即可。這樣就大功告成囉！ 以後使用Finder瀏覽時，就能隨時隨地以 vs code 開啟這個目錄了。]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>openincode</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker-compose內的port與expose差異]]></title>
    <url>%2Fpost%2Fdf5.html</url>
    <content type="text"><![CDATA[原本要寫個用 docker compose 來起 MongoDB container 的文章，發現整個弄完不到三分鐘，好像有點過於簡單。就順便用這個為範本來討論一下port的功能與expose的差異，在剛開始接觸的時候被搞混了一下。 攥寫yml檔案docker compose的檔案是用yml寫的，如果不知道什麼是 yml，可以參考一下連結，基本上就是比json更高可視化、更簡潔(更小)的設定檔。 將以下內容存成 docker-compose.yml 檔案即可 1234567version: '3'services: database: image: mongo container_name: Mongo_DkrCmps_Test ports: - "27117:27017" 執行下面兩個指令分別就是啟動與關閉這份 docker-compose 12docker-compose up //啟動docker-compose down //關閉 上圖就是寫好yml後執行，如果沒有MongoDB的image就會從網路上下載，下載好後就可以看到MongoDB的container已經在運行。 PortsPorts參數是該container的port號要綁定在主機端的port位置例如上面的例子就是將MongoDB預設的27017 port綁定在主機的 27117，這樣一來只需要連 localhost:27117 而不用暴露原始的 port號;更多細節會在後面文章談。 多個Port綁定？這當然可以，我們把範例改成下面這樣 123456789version: '3'services: database: image: mongo container_name: Mongo_DkrCmps_Test ports: - "27117:27017" - "27118:27017" - "27119" 請務必記得port需要使用雙引號當成字串處理，以免docker在解析上出問題。 重新執行後我們使用 docker-compose ps 指令來看結果 可以很清楚看到27117 與 27118皆綁定到 container的27017。而主機端的任意port號會被綁定到container的27119。(個人覺得用途很奇妙？) 所以 ports 與 expose 有何不同？簡單來說一個可以公開使用一個無法。Ports: 能連到主機的這些 port 都能夠使用。expose: 僅能在此 docker-compose 內的 container 們使用。 123456789version: '3'services: database: image: mongo container_name: Mongo_DkrCmps_Test ports: - "27117:27017" expose: - "27118" 啟動後，我們一樣用docker-compose ps來查看，結果如下圖： 我們可以發現 0.0.0.0:27117 可以連到 27017，但是 27118 無法在本機端連線，因為此yml範例中只有一個container，所以 27118 在這邊就沒功能了。 為什麼不用dockerfile就好？因為專案之後還會陸續加入其他container，每次都打一堆指令會很不方便。 這也太簡單了吧？如果什麼都使用預設值當然很簡單就是這樣，所有工具的官網都是這樣騙的。 為什麼截圖只有看到 dc up 指令可以參考這篇文章(macOS 編輯自己的快速指令)，基本上就是利用別名的概念新增自己的快速鍵。 每次都要開兩個視窗來啟動、關閉docker-compose很麻煩-d 參數是一定有支援的，只是在開發、測試階段我個人習慣還是看到terminal的訊息，協助debug 我不能直接用ctrl+c關閉嗎？這答案可以也不可以，其實 docker-compose up 與 docker-compose down已經是內建的綜合指令了。 docker-compose up 包含了 build 、 create 與 start 指令 docker-compose down 包含了 stop 與 rm 指令 細節我在這邊不多談，主要是舊的容器不會被刪除和volumne是否還會繼續留著引用的問題，所以還是建議乖乖下 docker-compose down 的指令。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>expose</tag>
        <tag>port</tag>
        <tag>start</tag>
        <tag>down</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gRPC Tool 產生 .cs 檔案的小bug]]></title>
    <url>%2Fpost%2F2af7.html</url>
    <content type="text"><![CDATA[今天在做一個需求時，使用 gRPC/protobuf 工具產生 .cs 檔案發現一個小bug，雖然不是很嚴重，不過還是記錄一下。 狀況 條件：.proto 檔案名稱帶有數字、數字後的第一個字母是英文且小寫 BUG：產生出來的 .cs 檔名，在數字後的第一個英文字母會強制變成大寫 例如今天建立一個檔案叫做 Number1test.proto 的檔案，經過 gRPC Tool 產生出來的 service 檔案預期會是 Number1test.cs，但結果卻是 Number1Test.cs。 注意到了嗎？在 1 後面的 t 應該會是小寫的，卻會變成大寫 T。 原因強者我同事馬上上github找到這段 source code 並且發現 bug 囉！ 在善心人士修復之前就要特別注意這個部分]]></content>
      <categories>
        <category>gRPC</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>protobuf</tag>
        <tag>bug</tag>
        <tag>grpc</tag>
        <tag>.NetCore</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 安裝MongoDB]]></title>
    <url>%2Fpost%2F28be.html</url>
    <content type="text"><![CDATA[嗯..這篇文章筆記性質很重，因為工作上需要就順便記錄一下流程以及可能遇到的問題。 安裝1brew install mongodb 真的就這樣！好吧！我有先安裝 HomeBrew 這個套件，相信 macOS 使用者應該都知道，這個套件能處理相依性的問題，若有使用linux like 的應該很能體會各種套件相依性的難搞。BTW，不需要特別先 brew update，因為使用 brew 就會先執行 update 指令囉。 啟動mongodb前準備MongoDB預設的DB路徑是 /data/db，所以要先配合建立這個資料夾，並賦予權限。 123sudo mkdir -p /data/dbsudo chown pattrichou /data/db //pattrichou請自行替換成你的使用者名字mongod //啟動 小提醒：你可以使用 whoami 指令來查詢使用者名稱 如果你不是想使用預設的路徑，可以透過 –dbpath 參數來指定DB路徑 1mongod --dbpath &lt;your own path&gt; 啟動失敗排除這就要仔細看一下terminal怎麼說了。例如遇到port已經被佔用，這時候要查一下PID是多少再把它刪除 1lsof -i :27017 //default mongodb port 取得PID後再把它刪除 1kill -9 xxxx //xxxx為PID 之後再次執行mongod即可運行 每次都要開terminal啟動mongo好累這時候 Homebrew 就扮演很重要角色 1brew services list //列出所有可用 service 找到mongodb 啟動他即可 1brew services start mongodb mongodb 安裝差不多就是這樣了，沒有太多困難或要注意的事項]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>macos</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 編輯自己的快速指令]]></title>
    <url>%2Fpost%2Fdbef.html</url>
    <content type="text"><![CDATA[人的進步始終來自惰性最近看到同事的一指令同步所有repo覺得很神奇，當時僅有這樣的感覺。後來在工作上一直重複得打一些指令覺得很阿雜，心想為什麼我要一直做這種事情，其實滿腦子根本已經是那個神奇的alias的形狀了，於是我就開始編輯屬於自己的alias囉！ 必備工具zshOh My Zsh(optional) 開始編輯alias檔案位置在使用者帳號底下，檔名 .zshrc 開啟檔案我們使用vi指令開啟，並拉到最下面，按下 i 開始編輯 1# vi ~/.zshrc 這邊其實就已經有給你範例了，把註解#拿掉就是一個別名。 我們這邊用快速取得客製化時間格式來當範例一般的date指令格式不習慣，我只需要年月日的話總不能每次都這樣打於是設定了以下別名，就叫做getdate好了 1# alias getdate="echo $(date +"%Y/%m/%d")" 存擋編輯完後按 esc，輸入 :wq 再按下enter即可儲存 重載zshrc檔案1# source ~/.zshrc 接著就可以享受成果囉！我使用了refcfg指令也是設定好的別名，在下面的範例就會看到。 每個人的使用習慣與需求都不同，但一定都會有很多冗長的指令需要重複輸入或操作的，使用alias會讓我們在工作上方便很多很多。 下面分享一些我自己的設定 1234567891011121314151617181920212223# zshrc# 使用vscode開啟.zshrcalias cfgzsh="code ~/.zshrc"# 重載.zshrcalias refzsh="source ~/.zshrc"# dockeralias dk="docker"alias dc="docker-compose"# dotnetalias dn="dotnet"alias dnb="dotnet build"alias dnr="dotnet run"# Private Github Misc repo# 一指令push到私有倉庫，並且使用當下的時間作為commis messagealias pushmisc="cd /Users/pattri.chou/Documents/private/git &amp;&amp; git add . &amp;&amp; git commit -m "$(date +"%Y/%m/%dT%H:%M:%S")" &amp;&amp; git push -u origin master" # 一指令pullalias synmisc="cd /Users/pattri.chou/Documents/private/git &amp;&amp; git pull"# 未來一個指令同步多個專案用的alias syncpall="syncmi" code 指令其實就是使用 visual studio code 來開啟，那要怎麼做呢？雖然有指令，不過我還蠻懶惰的，有GUI點一兩下就好了。 首先打開 visual studio code 同時按 command+shift+p (⌘⇧P) 輸入 shell 點擊 “Install ‘code’ command in PATH” 就大功告成啦]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>zshrc</tag>
        <tag>alias</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[軟體架構之Ｃ4模型]]></title>
    <url>%2Fpost%2Fd11.html</url>
    <content type="text"><![CDATA[軟體架構圖是讓人理解系統非常重要的，而用於表現、體現軟體架構的圖有非常多種，這邊談到的是Ｃ4模型。 圖勝表、表勝文大家都知道圖的重要性，繪製一張好的圖需要很多次的來回討論與修改，儘管花費很多時間，一但完成能夠大幅縮短後人了解系統的時間。 好啊！那來畫ＵＭＬ吧UML並不是不好，而是有一些限制在，簡單列一下我的感受： 觀看高度不夠。如果是想讓人快速了解系統或是要跟老闆報告，這些圖都不太適合，通常需要其他圖片來輔助。 外行看不懂。圖片畫出來就是要與人溝通的，如果門檻過高讓人看不懂無異於無字天書，如果你的對象是工程師，那我想應該不會有太大問題。 你真的懂UML？UML包含了各種類型的圖，除非有認真學習過怎麼繪製，否則裡面的每個細節可能會被誤用，一但誤用，就是誤會的開始了..例如循序圖的 Component/Entity是什麼？何時該用虛線何時該用實線…等等 到底要多詳細？同樣一張圖片，無法有明確的規範到底該畫到多詳細，有的人認為寫出描述即可，有的人需要畫出實作的方法名稱 說了一些點，本篇不是討論UML的，不過我依然認為他還是個對溝通有用的圖，如果真的有寫文件的話，甚至如果真的有人看的話。 C4 Model最近接觸到C4 Model架構，用來描述軟體架構的概念，當然相同的工具、做法有很多種，這邊就先寫一篇心得來記錄一下。作者將架構圖的視野由高至低分為四個等級，第一等級是最上層也是最粗略的。 以下圖片街擷取自官網 Level1: 系統上下文圖(System Context Diagram)在這個階層主要是將各種使用者/角色需要使用的功能畫出來，並不會有技術名詞或實作的相關做法，可以想像成User story的做法，將使用者的需求簡易的描述出來，跟哪些系統有關聯，使用哪些系統達到什麼事情。官網建議是把這次專案要開發的系統放在中間，以藍色的方塊來表示；灰色則是既有系統或非本專案需開發系統，再用虛線將系統界線畫出來。 Level2: 容器圖(Container Diagram)這邊用的名詞容器，並非像Docker之類的container。放大系統後的容器可以是網頁應用程式、桌面應用程式、Ａpp、資料庫等。在容器圖內可以看到各個應用程式（模組）間的相互溝通 Level3: 元件圖(Component Diagram)第三階段的圖其實就是再放大Lv2的應用程式，將應用程式內容更深入地畫出每個元件。我認為在這層彈性比較大，可以按類型或功能來分類每個component，例如範例是controller，也可以用service來分類，依照每個需求來去畫。 Level4: 程式到了最下層，需要最詳細的流程就可以在這邊表示，特別是決策圖可以表示什麼樣的條件該走什麼路，無論是對設計者自行檢查、開發者流程、以及ＱＡ的驗收依據，都是相當重要的。 在官網還提到了額外三種補充圖類型，分別是系統景觀圖（System Landscape Aarchcteure）、動態圖（Dynamic Diagram)以及部署圖（Deployment Diagram)，透過官網提供的範例，第一張偏向商業邏輯、第二張偏向開發的介面定義；第三章則是像維運面的，都分別有其功能，可以自由斟酌是否需要。]]></content>
      <categories>
        <category>Software Architecture</category>
      </categories>
      <tags>
        <tag>C4</tag>
        <tag>C4 model</tag>
        <tag>Software Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C# 中 Checked 語法的功能]]></title>
    <url>%2Fpost%2Fedcf.html</url>
    <content type="text"><![CDATA[在這個硬體成本不算高的年代，記憶體的使用通常都略微不那麼謹慎;往往在宣告數字型別時不會太謹慎（還是剛好我遇到的都…），例如只有short 需求卻宣告成 int 這種狀況屢見不鮮。 若要好好地控制記憶體使用量，避免溢位的需求就要特別注意，尤其這種狀況通常發生在執行期，log也可能也無法完整紀錄當時狀況，因此 Checked 語法就派上用場了。 1234short shortNumber = 32767;Console.WriteLine($&quot;Org short number: &#123;shortNumber&#125;&quot;);shortNumber += 1;Console.WriteLine($&quot;Plus 1 to short number:&#123;shortNumber&#125;&quot;); 顯示結果如下： 12Org short number: 32767Plus 1 to short number:-32768 明明只有加1卻出現了意想不到的數字。為了避免這種情況發生，可以使用Checked語法來做檢查，至少如果有問題會先彈出exception。 1Console.WriteLine($&quot;Plus 1 to short number:&#123;checked(shortNumber+=1)&#125;&quot;); 結果是直接跳出exception並告知以下結果： 1Unhandled Exception: System.OverflowException: Arithmetic operation resulted in an overflow. 當然我們也可以預先使用try catch來攔截相關的錯誤 1234567891011short shortNumber = 32767;Console.WriteLine($&quot;Org short number: &#123;shortNumber&#125;&quot;);try&#123; Console.WriteLine($&quot;Plus 1 to short number:&#123;checked(shortNumber += 1)&#125;&quot;);&#125;catch (System.OverflowException e)&#123; Console.WriteLine($&quot;Found overflow exception. Msg:\n&#123;e&#125;&quot;);&#125;Console.WriteLine($&quot;Done&quot;); 結果就是毫無懸念的 12345Org short number: 32767Found overflow exception. Msg:System.OverflowException: Arithmetic operation resulted in an overflow. at ConsoleAll.Program.Main(String[] args) in /Users/mingyi/Documents/vscode/Practice/ConsoleAll/ConsoleAll/Program.cs:line 13Done 這語法雖然難度不高，但能夠在執行期多了一層保障，以及更快能夠查到問題的所在。]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>checked</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[.Net Core 如何連線至MySql]]></title>
    <url>%2Fpost%2Fde81.html</url>
    <content type="text"><![CDATA[環境準備這篇主要是講在mac os下，.Net core 的程式如何連線至MySql資料庫。需要具備的工具如下 MySql .Net core 2.1 or later MySql workbench (option)這套軟體是Mysql的管理GUI，如果習慣使用terminal的就不需要 安裝Mysql這個基本上毫無難度，除非不熟mac的使用者可能會需要學習如何安裝程式。特別要注意的是安裝後要從“系統偏好設定”裡面開MySql的服務，如果沒看到的話，就重啟OS即可。 習慣使用指令的人也可以直接到安裝目錄開啟 12# cd /usr/local/mysql/bin# sudo ./mysql -u root -p 建立資料庫/資料表與資料123456create database TestConn;use TestConn;create table Connection(ConnStr varchar(100), Remark varchar(100));insert Connection(Connstr, remark) values('conn1', 'remark1');insert Connection(Connstr, remark) values('conn2', 'remark2'); C# 連線至DB取資料首先在專案的設定檔建立連線字串建好就可以執行以下程式碼連線到ＤＢ取資料囉！ 123456789101112131415161718192021222324var configuration = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&quot;appsettings.json&quot;) .Build();//Create Connectionusing (var connection = new MySqlConnection&#123; ConnectionString = configuration.GetConnectionString(&quot;ConnContext&quot;)&#125;)&#123; connection.Open(); //Prepare query string var cmd = new MySqlCommand(&quot;SELECT * FROM Connection;&quot;, connection); //Read data using (var rdr = cmd.ExecuteReader()) &#123; while (rdr.Read()) &#123; var row = $&quot;&#123;rdr[&quot;ConnStr&quot;]&#125;\t\t&#123;rdr[&quot;Remark&quot;]&#125;&quot;; Console.WriteLine(row); &#125; &#125; connection.Close();&#125;]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>.net core</tag>
        <tag>mysql</tag>
        <tag>dotnet core</tag>
        <tag>database</tag>
        <tag>connection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[.Net Core 如何建置出.exe檔案]]></title>
    <url>%2Fpost%2F63fe.html</url>
    <content type="text"><![CDATA[.Net Core 2.0 之前在 .Net core 專案底下編譯出來的只有 dll 與 json 的設定檔，有時候一些情況下還是使用 .exe 來執行 console 專案會比較方便。 .Net core 2.0 以前必須要在 csproj 裡面設定這個屬性，並且指定相對應的 os 123&lt;PropertyGroup&gt; &lt;RuntimeIdentifiers&gt;win10-x64&lt;/RuntimeIdentifiers&gt;&lt;/PropertyGroup&gt; 上述就是建置出可在 win10 x64執行的 exe檔案。 .Net Core 2.0 之後 (Terminal Command)當然也可以執行在terminal 執行輸入指令 1dotnet publish -c Release -r win10-x64 -c 是建置的configuration，預設資料夾是 Debug-r 是建置目標的 framework，就是本篇文章的目的 Platform 清單在官方教學文件中有所有 platform 的清單，有需要的可以到那邊查找。https://docs.microsoft.com/en-us/dotnet/core/rid-catalog .Net Core 2.0 之後 (Configuration)總不能要求我每次都下指令去產生吧！所以2.0之後還是可以加在 csproj 內，會一並產生出兩種類型的編譯檔。加上這段就可以了！（沒錯！一模一樣） 1&lt;RuntimeIdentifiers&gt;win10-x64&lt;/RuntimeIdentifiers&gt;]]></content>
      <categories>
        <category>DotNet</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>.net core</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ 的交換器(Exchange)]]></title>
    <url>%2Fpost%2Fff9d.html</url>
    <content type="text"><![CDATA[交換器(Exchange)是什麼？當訊息寫入RabbitMQ時，並非直接將訊息寫入佇列中，而是透過交換器(Exchange)將訊息正確分派到佇列中，而依據就是訊息自帶的RouteKey是否與BindKey相符合；若完全沒有符合的佇列，則會自動遺棄該訊息。 交換器有哪幾種？常用的交換器有四種 Direct, Fanout, Topic and Headers. Direct: 預設的模式，即直接將訊息分配到 RouteKey 與 BindKey 完全相同的佇列上。Case1: BindKey: “log.info“log.debug -&gt; 不符合log.info -&gt; 符合log.infomation -&gt; 不符合 Fanout: 顧名思義就是將此訊息分配到每一個佇列上，等於是複製了n次。若設定fanout的話會自動忽略 BindKey與RouteKey。 Topic: Topic是較常用也是靈活度最高的模式，有點像是.net的routing概念，只要符合規格的RouteKey就會被傳遞到正確的queue。特殊符號分別是: * (一個任意字)與 # (零以上個任意字)。 Case1: 12345BindKey: "*I.am.*" I.am.boy -&gt; 符合 I.am.girl -&gt; 符合 I.amNot.girl -&gt; 不符合 I.am.boy.too -&gt;不符合 Case2: 1234BindKey "#.strong" He.is.strong -&gt; 符合 Not.strong -&gt; 符合 I.am.not.strong.neither -&gt; 不符合 Headers: 從訊息中的header與BindKey做批配比較，並寫入queue中。這部分我也很少用，之後有特別研究再來補上怎麼使用。 使用上的效能當然還是 fanout &gt; direct &gt; topic，但我認為除非在很極端的狀況下，否則比較這個的意義並不大，畢竟工具的使用還是以符合需求為主。另一點要注意的是RouteKey長度限制為255 bytes。 Fanout模式的演示首先我們在宣告Exchange時將type指定為 “fanout”，當然在訂閱端也是需要的，程式碼一樣就不再貼上。 1channel.ExchangeDeclare(exchange: &quot;logs&quot;, type:&quot;fanout&quot;); 其他部分沒有改變，將專案建置好後，開啟兩個訂閱者程式，然後執行Sender.exe以fanout模式送出一個訊息，就可以看到兩個視窗幾乎同時收到該訊息，且進行處理。 程式範例檔完整的範例檔放在這 範例，有興趣的可以自行下載。]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>rabbitmq</tag>
        <tag>exchange</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ Routing功能]]></title>
    <url>%2Fpost%2F800f.html</url>
    <content type="text"><![CDATA[交換器(Exchange)的路由(Routing)功能現在我們已經更正確的使用交換器功能，而非將訊息直接寫入佇列，為什麼需要這樣做呢？因為RabbitMQ交換器擁有路由功能，當訊息進入交換器時，可以透過種類來分配到不同的佇列裡，以官網的例子就是LOG處理機制。 LOG的重要程度可大致分為 Debug, Info, Warning, Error, Fatal.Warning以上要分配到 Queue1Debug與Info 等級則要放到 Queue2 這樣在宣告佇列時就可以綁定到該分配器，但指定不同QueneName, RouteKey. EX: 12channel.QueueBind(queue: queueName, exchange: &quot;direct_logs&quot;, routingKey: &quot;INFO&quot;);channel.QueueBind(queue: queueName, exchange: &quot;direct_logs&quot;, routingKey: &quot;WARNING&quot;);  以下會用publisher分別發送兩個訊息到交換器，並指定不同的RouteKEY Publisher宣告兩個訊息並指定RouteKey分別為”ERROR”與”INFO” 123456789101112channel.ExchangeDeclare(exchange: &quot;direct_logs&quot;, type: &quot;direct&quot;);var msg_error = $&quot;This is Error msg.&quot;;var msg_info = $&quot;This is Info msg&quot;;channel.BasicPublish(exchange: &quot;direct_logs&quot;, routingKey: &quot;ERROR&quot;, basicProperties: null, body: Encoding.UTF8.GetBytes(msg_error));channel.BasicPublish(exchange: &quot;direct_logs&quot;, routingKey: &quot;INFO&quot;, basicProperties: null, body: Encoding.UTF8.GetBytes(msg_info)); Subscriber這邊雖然只用了一個佇列但綁定了四個不同RouteKey，收到訊息後印出是指定哪個RouteKey與內容。 12345678910111213channel.QueueBind(queue: queueName, exchange: &quot;direct_logs&quot;, routingKey: &quot;INFO&quot;);channel.QueueBind(queue: queueName, exchange: &quot;direct_logs&quot;, routingKey: &quot;WARNING&quot;);channel.QueueBind(queue: queueName, exchange: &quot;direct_logs&quot;, routingKey: &quot;ERROR&quot;);channel.QueueBind(queue: queueName, exchange: &quot;direct_logs&quot;, routingKey: &quot;FATAL&quot;);var consumer = new EventingBasicConsumer(channel);consumer.Received += (model, ea) =&gt;&#123; var body = ea.Body; var msg = Encoding.UTF8.GetString(body); var routingKey = ea.RoutingKey; Console.WriteLine($&quot;Receiving RoutingKey:&#123;routingKey&#125;, Msg:&#123;msg&#125;.&quot;);&#125;; 最後分別執行兩支程式，結果如下圖： 程式範例檔完整的範例檔放在這 範例，有興趣的可以自行下載，此版本與之前文章不同，是用 .Net Core開發的。]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>rabbitmq</tag>
        <tag>routing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ queue]]></title>
    <url>%2Fpost%2F71ca.html</url>
    <content type="text"><![CDATA[佇列的功能當系統已經繁忙逐漸無法及時回應需求，或是需求本身需要一段時間處理，以及複雜的HTTP請求這些狀況都很適合搭配訊息佇列來做處理。這邊用sleep來模擬處理很久的訊息。 Publisher (範例命名為Sender)基本上與範例一的內容一樣，就不多著墨。\ Consumer (範例命名為Receiver)為了模擬處理很久的訊息，在收到訊息後將內容逐一字元顯示。12345foreach (var i in message.ToCharArray())&#123; Thread.Sleep(150); Console.Write(&quot;&#123;0&#125;&quot;, i);&#125; 其他內容也與範例一是相同的，如果有不理解的可以回頭看第一篇文章。 為了更幫助理解，建議可以執行兩個 receiver.exe，再分別多次執行 sender.exe 這樣看以看多個訊息進入佇列後，每個 receiver 在繁忙中如何分配處理。 訊息處理確認機制(Acknowledgement)RabbitMQ提供每個訊息的回覆機制，啟用這個機制的話，會要求每個Consumer處理完訊息後要告知佇列，若沒有的話則佇列會視為訊息未正確被處理，並且立即由下一個Consumer來處理，直到正確收到回覆為止。 如何啟用?其實在範例中已經是啟用自動回覆機制，若要關閉自動回覆，則在這個地方將 autoack 參數設定為 false 123channel.BasicConsume(queue: &quot;hello&quot;, autoAck: false , consumer: consumer); 這邊一樣可以試試看開啟兩個 consumer 程式，然後僅執行一次 sender.exe。當第一個Consumer收到訊息且處理完畢後，將它關閉，接著可以看到第二個Consumer馬上收到相同訊息且開始處理。這就是設定了不自動回覆，導致佇列認為Consumer沒有正確處理訊息。所以這邊要自己撰寫回覆佇列的程式。 12Console.WriteLine(&quot;Msg handle finished, send acknowledgement now&quot;);channel.BasicAck(ea.DeliveryTag, false); 如此一來同樣訊息就不會一直被視為未正確處理。 程式範例檔完整的範例檔放在這 範例，有興趣的可以自行下載。]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>rabbitmq</tag>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello RabbitMQ]]></title>
    <url>%2Fpost%2Fe092.html</url>
    <content type="text"><![CDATA[什麼是RabbitMQRabbitMQ是訊息的中介層，可以想像是一個幫你保管、處理的佇列，只要發布者(Publisher)將訊息寫入後，該訊息會被放入指定的佇列，等待接收者(Consumer)的拿取。特性大概有以下幾種： 由Erlang開發 符合進階訊息佇列協定(AMQP) 支援非常多種語言與平台 訊息接收、處理的可靠性 高度靈活的路由功能 高可用性(Availability) 內建監控與管理介面 可建立集群，提昇資料安全與服務不中斷 提供各種插件(plugin)靈活運用 細節會在日後的文章陸續揭露或探討，而安裝方法非常簡單，網路上也有很多範例就不在這邊贅述了。本文所使用的程式語言是 .NET Framework C# Hello RabbitMQ如果是.net core使用者須先建立專案，這邊以console模式當範例，依序建立兩個專案並進入專案加入RabbitMQ.Client package 1234567dotnet new console -n Sendercd Sender/dotnet add package RabbitMQ.Clientcd ..dotnet new console -n Receivercd Receiver/dotnet add package RabbitMQ.Client 撰寫Publisher (範例命名為Sender) 建立連線的物件，hostname目前都是在本機所以localhost即，ＵserName與Ｐassword則需要另外建立。若是剛安裝好，預設是guest/guest為唯一且admin帳號。 12var factory = new ConnectionFactory() &#123; HostName = &quot;localhost&quot;, UserName = &quot;admin&quot;, Password = &quot;pass123&quot; &#125;; 建立連線作用域 123456using (var connection = factory.CreateConnection())&#123; using (var channel = connection.CreateModel()) &#123; &#125;&#125; 宣告名稱為 hello 的佇列以存放訊息 123456channel.QueueDeclare(queue: &quot;hello&quot;, durable: false, exclusive: false, autoDelete: false, arguments: null); 建立訊息 12var message = $&quot;Hello RabbitMQ. &#123;DateTime.Now.ToString(&quot;yyyy/MM/dd HH:mm:ss.fff&quot;)&#125;&quot;;var body = Encoding.UTF8.GetBytes(message); 發布訊息到 hello 訊息佇列 12345channel.BasicPublish(exchange: &quot;&quot;, routingKey: &quot;hello&quot;, basicProperties: null, body: body); 到這邊就完成發布者發布訊息的功能了。 撰寫接收者程式 (範例命名為Receiver) 步驟 1,2,3 與發布者相同，都是建立連線物件與宣告佇列名稱 建立委派接收到訊息的事件 12345678910var consumer = new EventingBasicConsumer(channel);consumer.Received += (model, ea) =&gt;&#123; var body = ea.Body; var message = Encoding.UTF8.GetString(body); Console.WriteLine(&quot;Received &#123;0&#125;&quot;, message);&#125;;channel.BasicConsume(queue: &quot;hello&quot;, autoAck: true, consumer: consumer); 依序是將收到的內容先做UTF8編碼，接著印出訊息內容最後的BasicConsume則是回覆給哪個訊息佇列、自動回覆、由那個接收者所回覆的。 Hello RabbitMQ 程式基本上就完成了。 程式範例檔完整的範例檔放在這 範例，有興趣的可以自行下載。裡面是一個方案，接收者與發佈者分別為兩個Console專案，編譯後可分別執行.exe檔案來查看結果，只要receiver沒有關閉，都能夠收到發布者的訊息。]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
</search>
